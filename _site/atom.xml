<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>RYALTECH</title>
 <link href="http://blog.ryaltech.com/atom.xml" rel="self"/>
 <link href="http://blog.ryaltech.com"/>
 <updated>2012-12-02T17:02:54-05:00</updated>
 <id>http://blog.ryaltech.com</id>
 <author>
   <name>RYALTECH</name>
   <email>alex.rykov@ryaltech.com</email>
 </author>

 
 <entry>
   <title>M2E System Dependencies Manifest Classpath</title>
   <link href="http://blog.ryaltech.com/2012/12/02/m2e-system-manifest-classpath"/>
   <updated>2012-12-02T00:00:00-05:00</updated>
   <id>http://blog.ryaltech.com/2012/12/02/m2e-system-manifest-classpath</id>
   <content type="html">&lt;p&gt;Maven system scoped dependencies should only be used when these dependencies are sensitive to their location. I was unlucky enough to need them and happened to be using M2E plugin for Eclipse. Some of my code depended on classes packaged in jars that my system dependency referred to using its manifest classpath entry.&lt;/p&gt;

&lt;p&gt;To my surprise Eclipse was showing errors in my code while compilation using command line mvn went smoothly. Some digging revealed the reason and the solution.&lt;/p&gt;

&lt;p&gt;Turns out that starting with Java 1.5 javac started respecting classpath manifest entries in jar files - &lt;a href='http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4212732'&gt;bug 4212732&lt;/a&gt;. Command line mvn relies on your java tooling for compilation. So it is clear why this works.&lt;/p&gt;

&lt;p&gt;M2E plugin relies on Eclipse compiler, which started respecting manifest classpath entries in 3.5 but &lt;a href='http://lt-rider.blogspot.ca/2010/05/jdt-manifest-classpath-classpath.html'&gt;dropped this support in 3.6&lt;/a&gt;. Hence the discrepancy in behaviour.&lt;/p&gt;

&lt;p&gt;Solution is simple. Just add -DresolveReferencedLibrariesForContainers=true to the Eclipse ini file as this &lt;a href='http://lt-rider.blogspot.ca/2010/05/jdt-manifest-classpath-classpath.html'&gt;post suggests&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>startWebLogic script invocation from wlst</title>
   <link href="http://blog.ryaltech.com/2012/11/18/wlst-weblogic-via-script"/>
   <updated>2012-11-18T00:00:00-05:00</updated>
   <id>http://blog.ryaltech.com/2012/11/18/wlst-weblogic-via-script</id>
   <content type="html">&lt;p&gt;WLST has been goto tool for WebLogic domain creation and management for a better part of the last decade. Starting WebLogic from within WLST using startServer command has its limitations. It would be logical to call startWebLogic script directly. Module developed for this purpose is available &lt;a href='https://github.com/arykov/wlstscripts/blob/master/wlfunc.py'&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JDBC deployment plan</title>
   <link href="http://blog.ryaltech.com/2012/08/04/jdbc-deployment-plan"/>
   <updated>2012-08-04T00:00:00-04:00</updated>
   <id>http://blog.ryaltech.com/2012/08/04/jdbc-deployment-plan</id>
   <content type="html">&lt;p&gt;Idea of deployable jms and jdbc modules that can be bundled in an application that needs them simplifies relationships between app developers and those who end up deploying them. No chance of forgetting to create datasources, queues, etc. No need to check whether they already exist and if they are created the way developer expected them to.&lt;/p&gt;

&lt;p&gt;Nevertheless, I don&amp;#8217;t see this feature being used much or at least not too many people care to admit to it. Otherwise, where are all those examples to save time? My jdbc module deployment plan example is &lt;a href='https://github.com/arykov/wlst_samples/tree/master/jdbcdeployplan'&gt;here&lt;/a&gt;. Don&amp;#8217;t forget to read readme.txt for a couple gotchas.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>WebLogic MBeanMaker and Maven</title>
   <link href="http://blog.ryaltech.com/2012/08/02/weblogicmbeanmaker-and-maven"/>
   <updated>2012-08-02T00:00:00-04:00</updated>
   <id>http://blog.ryaltech.com/2012/08/02/weblogicmbeanmaker-and-maven</id>
   <content type="html">&lt;p&gt;Setting up Maven build of your custom WebLogic security providers is no trivial task. This &lt;a href='http://monduke.com/2007/08/29/maven-and-weblogicmbeanmaker-in-weblogic-910/'&gt;post&lt;/a&gt; describes some of the pain you have to go through, but does not take you quite all the way. It still depends on WebLogic being installed. This makes assumptions about machines where maven will run on.&lt;/p&gt;

&lt;p&gt;To solve this problem you need to pass -Dweblogic.home=${project.build.sourceDirectory}/.. parameter to WebLogicMBeanMaker subprocesses to trick it into using location of your choice. This can be done like this&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java weblogic.management.commo.WebLogicMBeanMaker -jvmArgs &amp;#8220;-Dweblogic.home=${project.build.sourceDirectory}/..&amp;#8221; &amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This fake WebLogic home location should be part of your project and fixed relative to your source. All you need to do to set it up is to add &amp;#60;WEBLOGIC_HOME&amp;#62;/lib/schema/weblogic-domain-binding.jar to your ${project.build.sourceDirectory}/../lib/schema/ as well as &amp;#60;WEBLOGIC_HOME&amp;#62;/lib/mbeantypes/wlManagementImplSource.jar and &amp;#60;WEBLOGIC_HOME&amp;#62;/lib/mbeantypes/wlManagementMBean.jar to ${project.build.sourceDirectory}/../lib/mbeantypes.&lt;/p&gt;

&lt;p&gt;Check out your typical BEA sample security providers project that can be built with maven &lt;a href='https://github.com/arykov/weblogic-security-provider-mvn'&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Load WebLogic Libraries into Maven</title>
   <link href="http://blog.ryaltech.com/2012/08/01/load-weblogic-libraries-into-maven"/>
   <updated>2012-08-01T00:00:00-04:00</updated>
   <id>http://blog.ryaltech.com/2012/08/01/load-weblogic-libraries-into-maven</id>
   <content type="html">&lt;p&gt;Starting with version 9 of WebLogic server BEA and later Oracle have been pursuing componentization of its own products. This dramatically increased the number of jars in its installation. Most well written applications have no dependencies on these jars. Yet there are some cases when this is unavoidable.&lt;/p&gt;

&lt;p&gt;Some jars get placed on the classpath automatically when you add weblogic.jar. However it only works when you are using regular WebLogic installation. This is not the case if you are using maven. To simplify loading all the jars into your maven repository you can use &lt;a href='https://github.com/arykov/weblogic-security-provider-mvn/blob/master/beatomvn.sh'&gt;this script&lt;/a&gt;. Dependencies still need to be specified manually.&lt;/p&gt;</content>
 </entry>
 
 
</feed>